#! /usr/bin/env python

import csv
import rospy
from geometry_msgs.msg import Pose2D
from sensor_msgs.msg import JointState
from control_sn.msg import param
import math

rospy.init_node('writer_csv')

#global var i'm gonna use
x = 0.0
y = 0.0
a_p = 0.0
ot_p = 0.0
ox_p = 0.0
a_y = 0.0
ot_y = 0.0
ox_y = 0.0
V_m = 0.0
Ph = 0.0
k = 0.0
count = 0
v = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
tor =  [1.,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.,13.,14.]
dist_per = 0.0
en_y = 0.0
en_p = 0.0

def Callback1(data):
    global x, y
    x = data.x - 0.7
    y = data.y

def Callback2(data):
    global a_p, ot_p, ox_p, a_y, ot_y, ox_y, V_m, Ph, k, count
    a_p = data.A_p
    ot_p = data.Ot_p
    ox_p = data.Ox_p
    a_y = data.A_y
    ot_y = data.Ot_y
    ox_y = data.Ox_y
    V_m = data.V_m
    Ph = data.Ph
    k = data.K
    count = data.COUNTER

def Callback3(data):
    global v, tor
    v = data.velocity
    tor = data.effort

rospy.Subscriber('/snake/joint_states', JointState, Callback3)
rospy.Subscriber('/my_odom', Pose2D, Callback1)
rospy.Subscriber('/param', param, Callback2)

#write the first two lines down
with open("/home/andrea/Desktop/results/test3.csv", "wb") as writeFile:
    wr=csv.writer(writeFile, dialect='excel')
    wr.writerow(['Attempt', 'Amplitude Pitch', 'Spatial frequency Pitch', 'Time frequency Pitch', 'Amplitude Yaw', 'Spatial frequency Yaw', 'Time frequency Yaw', 'Mean value', 'Phase', 'Constant', 'x', 'y', 'Distanza Totale', 'Distanza Percorsa', 'Pitch Energy', 'Yaw Energy'])
    wr.writerow([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
    writeFile.close()

#variable for incremental values
act_count = 1
act_x = 0
act_y = 0

r=rospy.Rate(100)
while not rospy.is_shutdown():
    
    rospy.Subscriber('/snake/joint_states', JointState, Callback3)
    rospy.Subscriber('/my_odom', Pose2D, Callback1)
    rospy.Subscriber('/param', param, Callback2)

    if not a_p:
        pd = True
        while pd:
            try:
                r.sleep()
                pd = False
            except:
                pass
        pass

    else:
        dist = math.sqrt(x**2+y**2)
        dist_rel = + math.sqrt((x-act_x)**2+(y-act_y)**2)
        dist_per += dist_rel
        en_y += 0.1*(tor[0] * v[0] + tor[2] * v[2] + tor[4] * v[4] + tor[6] * v[6] + tor[8] * v[8] + tor[10] * v[10] + tor[12] * v[12])
        en_p += 0.1*(tor[1] * v[1] + tor[3] * v[3] + tor[5] * v[5] + tor[7] * v[7] + tor[9] * v[9] + tor[11] * v[11] + tor[13] * v[13])
        line_to_override = {act_count:['Tentativo ' + str(act_count), round(a_p,3), ox_p, ot_p, a_y, ox_y, ot_y, V_m, Ph, round(k,3), round(x,3), round(y,3), round(dist,3), round(dist_per,3), round(en_p,3), round(en_y,3)]}
        if act_count == count:
            empty = []
            act_x = x
            act_y = y
            with open("/home/andrea/Desktop/results/test3.csv", 'r') as readFile:
                read = csv.reader(readFile, dialect='excel')
                empty.extend(read)
            with open("/home/andrea/Desktop/results/test3.csv", 'w') as writeFile:
                wr = csv.writer(writeFile, dialect='excel')
                for line, row in enumerate(empty):
                    data = line_to_override.get(line, row)
                    wr.writerow(data)
                writeFile.close()
            pd = True

            while pd:
                try:
                    r.sleep()
                    pd = False
                except:
                    pass



        else:
            act_count = count
            act_x = 0.0
            act_y = 0.0
            dist_per = 0.0
            en_p = 0.0
            en_y = 0.0
            with open("/home/andrea/Desktop/results/test3.csv", "a") as fp:
                wr = csv.writer(fp, dialect="excel")
                line_to_override = ['Tentativo ' + str(act_count), a_p, ox_p, ot_p, a_y, ox_y, ot_y, V_m, Ph, k, round(x,3), round(y,3), round(dist,3), round(dist_per,3), round(en_p,3), round(en_y,3)]
                wr.writerow(line_to_override)
                fp.close()
            pd = True

            while pd:
                try:
                    r.sleep()
                    pd = False
                except:
                    pass
